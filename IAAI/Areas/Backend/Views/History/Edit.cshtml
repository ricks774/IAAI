@model IAAI.Models.About

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Backend/Views/Shared/_Layout.cshtml";
}

@section scripts {
    <script src="https://cdn.ckeditor.com/ckeditor5/41.1.0/decoupled-document/ckeditor.js"></script>
    <script>
        DecoupledEditor
            .create(document.querySelector('#editor-about'))
            .then(editor => {
                const toolbarContainer = document.querySelector('#toolbar-container');

                // 將編輯器的工具欄附加到指定的容器上
                toolbarContainer.appendChild(editor.ui.view.toolbar.element);

                // 設置讀取到的資料
                editor.setData(document.querySelector('#History').value);

                // 監聽編輯器內容的變化，並將其更新到資料庫
                editor.model.document.on('change', () => {
                    document.querySelector('#History').value = editor.getData();
                });
            })
            .catch(error => {
                console.error(error);
            });
    </script>
}

@section styles{
    <style>
        .document-editor {
            border: 1px solid var(--ck-color-base-border);
            border-radius: var(--ck-border-radius);
            /* Set vertical boundaries for the document editor. */
            max-height: 700px;
            /* This element is a flex container for easier rendering. */
            display: flex;
            flex-flow: column nowrap;
            background-color: white;
        }

        .document-editor__toolbar {
            /* Make sure the toolbar container is always above the editable. */
            z-index: 1;
            /* Create the illusion of the toolbar floating over the editable. */
            box-shadow: 0 0 5px hsla( 0,0%,0%,.2 );
            /* Use the CKEditor CSS variables to keep the UI consistent. */
            border-bottom: 1px solid var(--ck-color-toolbar-border);
        }

            /* Adjust the look of the toolbar inside the container. */
            .document-editor__toolbar .ck-toolbar {
                border: 0;
                border-radius: 0;
            }
    </style>
}

<h2 style="color:#f4f4f4">沿革</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4 style="color:#f4f4f4">編輯</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="col-md-10">
            <div class="document-editor">
                <div id="toolbar-container"></div>
                <div id="editor-about">
                    @Html.EditorFor(model => model.History, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.History, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.AboutUs, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.HiddenFor(model => model.AboutUs, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AboutUs, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.Organization, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Organization, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Organization, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.History, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                <div id="toolbar-container"></div>
                <div id="editor-about">
                    @Html.HiddenFor(model => model.History, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.History, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.Certified, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Certified, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Certified, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.Expert, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Expert, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Expert, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.CreateDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.HiddenFor(model => model.CreateDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreateDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>